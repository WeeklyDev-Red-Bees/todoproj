import _ from 'lodash';
import fs from 'fs';
import gulp from 'gulp';
import browserify from 'browserify';
import source from 'vinyl-source-stream';
import bowerResolve from 'bower-resolve';
import nodeResolve from 'resolve';

import babelify from 'babelify';
import scssify from 'scssify';
import stringify from 'stringify';
import del from 'del';
import runSeq from 'run-sequence';

var debug = (process.env.NODE_ENV !== 'production');

gulp.task('build:vendor', () => {
  var b = browserify('src/vendor.js', { debug })
    .transform(babelify);
  
  // getBowerPackageIds().forEach((id) => {
  //   var resolvedPath = bowerResolve.fastReadSync(id);
    
  //   b.require(resolvedPath, {
  //     expose: id
  //   });
  // });
  
  // getNPMPackageIds().forEach((id) => {
  //   b.require(nodeResolve.sync(id), { expose: id });
  // });
  
  var stream = b
    .bundle()
    .on('error', function(err) {
      console.log(err);
      this.emit('end');
    })
    .pipe(source('vendor.js'));
    
  stream.pipe(gulp.dest('dist'));
  return stream;
});

gulp.task('build:polyfills', () => {
  var b = browserify('src/polyfills.js', { debug })
    .transform(babelify);
  
  // getBowerPackageIds().forEach((id) => {
  //   var resolvedPath = bowerResolve.fastReadSync(id);
    
  //   b.require(resolvedPath, {
  //     expose: id
  //   });
  // });
  
  // getNPMPackageIds().forEach((id) => {
  //   b.require(nodeResolve.sync(id), { expose: id });
  // });
  
  var stream = b
    .bundle()
    .on('error', function(err) {
      console.log(err);
      this.emit('end');
    })
    .pipe(source('polyfills.js'));
    
  stream.pipe(gulp.dest('dist'));
  return stream;
});


gulp.task('build:main', () => {
  var b = browserify('src/main.js', { debug })
    .transform(babelify)
    .transform(stringify, {
      appliesTo: { includeExtensions: ['.html'] }
    })
    .transform(scssify, {
      autoInject: false,
      export: true
    });
  
  getBowerPackageIds().forEach((lib) => {
    b.external(lib);
  });
  
  getNPMPackageIds().forEach((id) => {
    b.external(id);
  });
  
  var stream = b.bundle().pipe(source('main.js'));
  
  stream.pipe(gulp.dest('dist'));
  return stream;
});

gulp.task('clean', () => del('dist'));

gulp.task('copy', ['clean'], () => {
  return gulp.src('src/index.html')
    .pipe(gulp.dest('dist'));
});

gulp.task('build', ['copy'], (cb) => {
  runSeq('build:polyfills', 'build:vendor', 'build:main', cb);
});


function getBowerPackageIds() {
  // read bower.json and get dependencies' package ids
  var bowerManifest = {};
  try {
    bowerManifest = require('./bower.json');
  } catch (e) {
    // does not have a bower.json manifest
  }
  return _.keys(bowerManifest.dependencies) || [];

}


function getNPMPackageIds() {
  // read package.json and get dependencies' package ids
  var packageManifest = {};
  try {
    packageManifest = require('./package.json');
  } catch (e) {
    // does not have a package.json manifest
  }
  return _.keys(packageManifest.dependencies) || [];

}